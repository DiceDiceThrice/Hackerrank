Calculates the minimum number of character changes required to split a string into two anagram halves. The solution first checks if the string length is even; if odd, it immediately returns -1 since equal division is impossible. For even-length strings, it divides the string into two equal halves and counts character frequencies in each half using integer arrays that track occurrences of each letter. The algorithm then compares these frequency arrays, calculating how many characters from the second half exceed their corresponding counts in the first half. This difference represents the minimum number of characters that need to be changed in the second half to make both halves anagrams of each other, which is returned as the result.